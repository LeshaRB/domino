def generatedDir = new File(buildDir, "generated/source/apt")

apply plugin: "java"

sourceSets {
  main {
    java {
      srcDirs = ["$generatedDir/main", "src/main/java"]
    }
    resources {
      srcDirs = ["src/main/resources"]
    }
  }
  test {
    java {
      srcDirs = ["$generatedDir/test", "src/test/java"]
    }
    resources {
      srcDirs = ["src/test/resources"]
    }
  }
}

compileJava {
  sourceCompatibility = "1.8"
  targetCompatibility = "1.8"
  options.encoding = "UTF-8"
  options.compilerArgs = ["-Xlint:all"]
  dependsOn(processResources)
}

jar {
  from sourceSets.main.allSource
}

/*
task sourceSetJavaProperties {
  sourceSets {
    main {
      println "========== ${project.name} =========="
      println "***** java.srcDirs = "
      getPathInfo(java.srcDirs, false)
      println "***** resources.srcDirs = "
      getPathInfo(resources.srcDirs, false)
      println "***** java.files = "
      getPathInfo(java.files, true)
      println "***** allJava.files = "
      getPathInfo(allJava.files, true)
      println "***** resources.files = "
      getPathInfo(resources.files, true)
      println "***** allSource.files = "
      getPathInfo(allSource.files, true)
      println "***** output.classesDir = ${output.classesDir}"
      println "***** output.resourcesDir = ${output.resourcesDir}"
      println "***** output.files = ${output.files}"
      getPathInfo(output.files, false)
    }
  }
}
*/

/*
def getPathInfo(Set<File> fileSet, boolean name) {
  if (name) {
    fileSet.each { file -> println "*** " + file.name }
  } else {
    fileSet.each { file -> println "*** " + file }
  }
}
*/