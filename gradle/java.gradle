def generatedDir = new File(buildDir, "generated/source/apt")

apply plugin: "java"

sourceSets {
  main {
    java {
      srcDirs = ["$generatedDir/main", "src/main/java"]
    }
    resources {
      srcDirs = ["src/main/resources"]
    }
  }
  test {
    java {
      srcDirs = ["$generatedDir/test", "src/test/java"]
    }
    resources {
      srcDirs = ["src/test/resources"]
    }
  }
}

compileJava {
  sourceCompatibility = "1.8"
  targetCompatibility = "1.8"
  options.encoding = "UTF-8"
  options.compilerArgs = ["-Xlint:all"]
  dependsOn(processResources)
}

jar {
  from sourceSets.main.allSource
}

/*
task sourceSetJavaProperties {
  sourceSets {
    main {
      println "====================================="
      println "========== ${project.name} =========="
      println "====================================="
      println "java.srcDirs = ${java.srcDirs}"
      println "resources.srcDirs = ${resources.srcDirs}"
      println "java.files = ${java.files.name}"
      println "allJava.files = ${allJava.files.name}"
      println "resources.files = ${resources.files.name}"
      println "allSource.files = ${allSource.files.name}"
      println "output.classesDir = ${output.classesDir}"
      println "output.resourcesDir = ${output.resourcesDir}"
      println "output.files = ${output.files} "
    }
  }
}
*/

//afterEvaluate {
//  if (tasks.findByName("classes")) {
//    task sourcesJar(type: Jar, dependsOn: classes) {
//      classifier = 'sources'
//      from sourceSets.main.allSource
//      from sourceSets.generated.allSource
//    }
//    artifacts {
//      archives sourcesJar
//    }
//  }
//}